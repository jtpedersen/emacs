#+TITLE: Literate emacs
#+AUTHOR: pedersen
#+OPTIONS: toc:nil num:nil

* Core Settings



** Paths

#+begin_src emacs-lisp
(setq native-comp-eln-load-path (list (concat user-emacs-directory "eln-cache")))
(add-to-list 'load-path (expand-file-name "." (concat user-emacs-directory "lisp")))
(setq temporary-file-directory (concat user-emacs-directory "tmp"))
(defvar backup-dir (expand-file-name "." (concat user-emacs-directory "backups")))
(unless (file-exists-p backup-dir)
  (make-directory backup-dir))

#+end_src


** Speed up loading

#+begin_src emacs-lisp
(setq gc-cons-threshold 100000000)
(add-hook 'after-init-hook (lambda () (setq gc-cons-threshold 800000)))
#+end_src



** Local setup
This is a file with setup for email account / various tokens etc that
is required, but i do not want to publish or is specific to the
machine that i am using.

#+begin_src emacs-lisp :tangle no
(setq user-mail-address "user@example.com")
(setq org-directory "/home/user/orgs")
#+end_src


#+begin_src emacs-lisp
(load-library (concat user-emacs-directory "local-setup.el"))  
#+end_src


** Customisations
#+begin_src emacs-lisp
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
(load custom-file 'noerror 'nomessage)
#+end_src

* Packages setup

#+begin_src emacs-lisp
(require 'package)
(setq package-archives
      '(("gnu" . "http://elpa.gnu.org/packages/")
        ("melpa" . "http://melpa.org/packages/")))


(defun require-package (package)
  "Ensure PACKAGE is installed. If not, refresh package contents and install it."
  (unless (package-installed-p package)
    (unless package-archive-contents
      (package-refresh-contents))
    (if (package-installed-p package)
        t
      (progn
        (package-install package)
        (require package)))))

(require-package 'use-package)
(require 'use-package)
(setq use-package-always-ensure t)


(defmacro my-use-package (package &rest args)
  "Ensure PACKAGE is installed using `require-package` and configure it with `use-package`.
Defaults to `:defer t` unless overridden in ARGS."
  `(progn
     (require-package ',package)
     (use-package ,package
       ,@(if (plist-member args :defer)
             args  ; Use the provided arguments as-is if :defer is already set
           (append '(:defer t) args)))))


(defmacro my-use-package-startup (package &rest args)
  "Ensure PACKAGE is installed and loaded eagerly at startup using `use-package`.
Forwards ARGS to `use-package`."
  `(progn
     (require-package ',package)
     (use-package ,package
       ,@args)))

#+end_src

* UI 

** UTF-8 Encoding
#+BEGIN_SRC emacs-lisp
(setq locale-coding-system 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-selection-coding-system 'utf-8)
(prefer-coding-system 'utf-8)
#+END_SRC

** Lean ui
#+begin_src emacs-lisp
;; don't show menu-bar
(menu-bar-mode -1)
;; same for the toolbar
(tool-bar-mode -1)
;; .. and for the scrollbar
(scroll-bar-mode -1)
;;dont show the GNU splash screen
(setq inhibit-startup-message t)
;; show selection from mark
(transient-mark-mode t)
;; syntax highlight
(global-font-lock-mode t)
;; Show current buffer size
(size-indication-mode t)
#+end_src

** Font choice
#+begin_src emacs-lisp 
(set-face-attribute 'default nil :font "DejaVu Sans Mono" :height (pcase system-type
                                                                    ('gnu/linux 110)
                                                                    ('darwin 130)) :weight 'normal)
#+end_src

*** Make font bigger/smaller.
#+begin_src emacs-lisp
(global-set-key (kbd "C-+") 'text-scale-increase)
(global-set-key (kbd "C--") 'text-scale-decrease)
(global-set-key (kbd "C-0") 'text-scale-adjust)
#+end_src


** Nice behavioral tweaks
#+begin_src emacs-lisp
;; turn off bip warnings
(setq visible-bell 1)
;; use y-or-n predicates
(setq use-short-answers t)
;; Fatfinger protection
(setq confirm-kill-emacs 'y-or-n-p)
#+end_src

** Theme
#+BEGIN_SRC emacs-lisp
(my-use-package-startup zenburn-theme
  :config
  (load-theme 'zenburn t))
#+END_SRC

* File associations

** Open .h/.cc files in c++ mode.

#+begin_src emacs-lisp
(add-to-list 'auto-mode-alist '("\\.h\\'" . c++-mode))
(add-to-list 'auto-mode-alist '("\\.cc\\'" . c++-mode))
#+end_src

** arduino files
#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist '("\\.ino$" . c++-mode))
#+END_SRC

* Finding files

* Viewing files

** Browse archives
#+begin_src emacs-lisp
(auto-compression-mode t)
#+end_src

** Auto reverting
#+begin_src emacs-lisp
;; Auto-revert buffers when files change on disk.
(defvar auto-revert-verbose t)
;; announce when buffer is reverted.
(global-auto-revert-mode t)
#+end_src

** Backup pruning
Save all backups and auto-saves to a temporary directory. And clean it for all files older than a week.



#+begin_src emacs-lisp
(message "Deleting backup files older than a week...")
(let ((week (* 60 60 24 7))
      (current (float-time (current-time))))
  (dolist (file (directory-files backup-dir t))
    (when (and (backup-file-name-p file)
               (> (- current (float-time (nth 5 (file-attributes file))))
                  week))
      (message "%s" file)
      (delete-file file))))

(setq backup-directory-alist `((".*" . ,backup-dir)))
(setq auto-save-file-name-transforms `((".*" ,backup-dir t)))
#+end_src

*** TODO Make this run after loading emacs...

** HTML
#+BEGIN_SRC emacs-lisp
(my-use-package htmlize)
#+END_SRC

* Navigating

** Between open buffers

#+begin_src emacs-lisp
(my-use-package-startup window-numbering
  :config
  (window-numbering-mode 't))
#+end_src


** Files

*** Projectile
#+BEGIN_SRC emacs-lisp
(my-use-package-startup projectile
  :ensure t
  :init
  (setq projectile-keymap-prefix (kbd "C-x p"))
  (setq projectile-mode-line "ρ")
  (setq projectile-enable-caching 'native)
  (setq projectile-file-exists-remote-cache-expire (* 10 60))
  (setq projectile-indexing-method 'alien)
  :config
  (projectile-mode +1)
  )
#+END_SRC

*** Show recently opened files

#+begin_src emacs-lisp
(my-use-package-startup recentf
  :config
  (setq recentf-max-saved-items 200
        ;; Cleanup recent files only when Emacs is idle, but not when the mode
        ;; is enabled, because that unnecessarily slows down Emacs. My Emacs
        ;; idles often enough to have the recent files list clean up regularly
        recentf-auto-cleanup 300
        recentf-exclude (list "/\\.git/.*\\'" ; Git contents
                              "/elpa/.*\\'"   ; Package files
                              "/itsalltext/"  ; It's all text temp files
                              ".*\\.gz\\'"
                              "TAGS"
                              (concat user-emacs-directory "/saveplace.txt")
                              ".*-autoloads\\.el\\'"))
  (recentf-mode))
#+end_src


*** Magic return to where you left from
I am not sure that this really works..
#+begin_src emacs-lisp
(save-place-mode 1)
#+end_src

*** Saves mini buffer history including search and kill ring values, and compile history.

#+begin_src emacs-lisp
(my-use-package-startup savehist
  :config
  (setq savehist-additional-variables
        '(search-ring regexp-search-ring kill-ring compile-history))
  (setq savehist-autosave-interval 60)
  (setq savehist-file (concat user-emacs-directory "savehist"))
  (savehist-mode t))
#+end_src



** Mulitple cursors
#+BEGIN_SRC emacs-lisp
(my-use-package-startup multiple-cursors
  :config
  :bind(( "C->"     . mc/mark-next-like-this)
        ( "C-<"     . mc/mark-previous-like-this)
        ( "C-c C-<" . mc/mark-all-like-this)
        ( "C-;" . mc/mark-all-dwim)))
#+END_SRC

* Git

** magit
#+BEGIN_SRC emacs-lisp
(my-use-package magit
  :config
  (add-hook 'magit-mode-hook 'magit-load-config-extensions)
  ;; Set defaults used by specific operations.
  (setq magit-merge-arguments '("--no-ff"))
  (setq magit-pull-arguments '("--rebase"))
  (setq magit-cherry-pick-arguments '("-x")))

(global-set-key ( kbd "C-x g") #'magit-status)
(global-set-key ( kbd "C-c h") #'magit-log-buffer-file)
#+END_SRC

** Browse git history
#+begin_src emacs-lisp
(my-use-package git-timemachine)
#+end_src



** Turn on smerge-mode when opening a file with the markers in them.
#+BEGIN_SRC emacs-lisp
(defun sm-try-smerge ()
  (save-excursion
    (goto-char (point-min))
    (when (re-search-forward "^<<<<<<< " nil t)
      (smerge-mode 1))))


(add-hook 'find-file-hook #'sm-try-smerge t)
(add-hook 'smerge-mode-hook
      (lambda ()
        (local-set-key (kbd "M-RET") #'smerge-keep-current)
        (local-set-key (kbd "M-a") #'smerge-keep-all)
        (local-set-key (kbd "M-n") #'smerge-next)
        (local-set-key (kbd "M-p") #'smerge-prev)))
#+END_SRC

* Writing

Remember you may have to install aspell 

#+begin_src emacs-lisp
;; Set aspell as spell program
(defvar ispell-program-name "aspell")

;; Speed up aspell: ultra | fast | normal
(defvar ispell-extra-args '("--sug-mode=normal"))

;; Flyspell activation for text mode
(add-hook 'text-mode-hook
          (lambda () (flyspell-mode t)))

;; Change to danish dict
(defun da-spell ()
  "Set Ippell to use Danish dictionary."
  (interactive)
  (ispell-change-dictionary "dansk"))

;; Change to english dict
(defun en-spell ()
  "Set Ispell to use English dictionary."
  (interactive)
  (ispell-change-dictionary "english"))
#+end_src

* org-mode

#+BEGIN_SRC emacs-lisp
(my-use-package org
  :config
  (setq org-log-done t)
  ;; Yes it's long... but more is better ;)
  (defvar org-clock-history-length 35)
  ;; Resume clocking task on clock-in if the clock is open
  (defvar org-clock-in-resume t)
  ;;Change task state to STARTED when clocking in
  (defvar org-clock-in-switch-to-state "STARTED")
  ;; Doing
  (setq org-todo-keywords
        '((sequence "TODO(t)" "STARTED(s!)" "|" "ABORTED(a@)" "DONE(d@/!)")))
  ;; writing hooks
  (add-hook 'org-mode-hook 'auto-fill-mode t)
  (add-hook 'org-mode-hook 'flyspell-mode t)
  ;; Capture notes
  (defvar jtp-inbox (concat org-directory "/todo.org"))
  (defvar org-default-notes-file jtp-inbox)
  ;; Templates
  (defvar org-capture-templates
    '(("t" "Todo" entry (file+headline jtp-inbox "Inbox")
       "* TODO %?\n  %i\n  %a")
      ("f" "Follow up" entry (file+headline jtp-inbox "Tasks")
       "* TODO Follow up on: %?\n  DEADLINE: %^t")
      ("m" "Meeting" entry (file+headline jtp-inbox "Meetings")
       "* TODO %?\n  SCHEDULED: %^T")))
  (setq org-plantuml-jar-path "~/plantuml.jar")
  :bind
  (("\C-ca" . org-agenda)
   ("\C-ce" . export-tangle)
   ("\C-cc" . org-capture)))

;; fontify code in code blocks
(setq org-src-fontify-natively t)
#+END_SRC

** Reveal 
#+BEGIN_SRC emacs-lisp
(my-use-package-startup ox-reveal)
#+END_SRC

** Tangling

#+BEGIN_SRC emacs-lisp
(defun export-tangle ()
  "Shortcut for exporting and tangling the current org-mode buffer."
  (interactive)
  (org-gfm-export-to-markdown)
  (org-babel-tangle))
#+END_SRC

* Programming

** Compile / Error key bindings
#+begin_src emacs-lisp
(global-set-key [(C-f5)] #'compile)
(global-set-key [(f5)] #'recompile)
(global-set-key [(f6)] #'next-error)
(global-set-key [(C-f6)] #'flycheck-next-error)

(add-hook 'prog-mode-hook
          (lambda ()
            (local-set-key "\C-c\C-c" 'recompile)
            (local-set-key "\C-c\C-f" 'next-error)))

(add-hook 'prog-mode-hook #'display-line-numbers-mode)
#+end_src

** Debugger
#+begin_src emacs-lisp
(my-use-package realgud)
#+end_src


** Viewing compilation output

This can cost in performance, as something may be examining the
compilation buffer. But it should be ok, for now..

#+begin_src emacs-lisp
(setq compilation-scroll-output t)
(setq compilation-window-height 30
      compilation-scroll-output 'first-error
      compilation-skip-threshold 2 ; skip accros warnings
      compilation-always-kill t) ;; Don't ask, just start new compilation.

(my-use-package ansi-color
  :hook (compilation-filter . ansi-color-compilation-filter)) 
#+end_src

** YAS 
#+BEGIN_SRC emacs-lisp
(my-use-package-startup yasnippet
  :config
  (defconst yas-dir (concat user-emacs-directory "snippets"))
  ;; Add local snippets to override some of the defaults in elpa folder.
  (add-to-list 'yas-snippet-dirs yas-dir)
  (yas-global-mode 1))

(my-use-package yasnippet-snippets)
#+END_SRC


** eglot

Ensure eglot is installed and configured

#+begin_src emacs-lisp
(my-use-package-startup eglot
  :config
  (with-eval-after-load 'eglot
  (add-to-list 'eglot-server-programs 
	       '((c-mode c++-mode) . ("clangd" "-j=8"
				      "--log=error"
				      "--malloc-trim"
				      "--background-index"
				      "--clang-tidy"
				      "--cross-file-rename"
				      "--completion-style=detailed"
				      "--pch-storage=memory"
				      "--header-insertion=never"
				      "--header-insertion-decorators=0"))
	       '((python-mode . ("pyright")))))
  :bind (
         ("M-." . xref-find-definitions)   ;; Jump to declaration/definition
         ("M-," . xref-pop-marker-stack)   ;; Jump back to previous position
         ("M-?" . xref-find-references)))  ;; Find references to symbol at point


(add-hook 'c-mode-hook #'eglot-ensure)
(add-hook 'c++-mode-hook #'eglot-ensure)
(add-hook 'rust-mode-hook #'eglot-ensure)
(add-hook 'python-mode #'eglot-ensure)
(add-hook 'org-mode #'eglot-ensure)
(add-hook 'lisp-mode #'eglot-ensure)

(my-use-package-startup eldoc-box
  :config
  (add-hook 'eglot-managed-mode-hook #'eldoc-box-hover-mode t))

#+end_src



** elisp

#+begin_src emacs-lisp
(add-hook 'emacs-lisp-mode-hook
          (lambda ()
            (eldoc-mode)
            (local-set-key (kbd "C-c b") 'eval-buffer)
            (local-set-key (kbd "C-c r") 'eval-region)))
#+end_src


** C++ 

*** Create include guards

#+begin_src emacs-lisp
(defun my-c-header-ifdef ()
  "Create a header guard with random suffix on the define name."
  (interactive)
  (save-excursion
    (let* ((guard (replace-regexp-in-string "[^0-9a-zA-Z]" "_"
                                            (buffer-name)))
           (guard (replace-regexp-in-string "h\\'" "" guard))
           (guard (concat guard  (shell-command-to-string "openssl rand -hex 8"))))
      (goto-char (point-min))
      (insert (concat "#ifndef " guard))
      (insert (concat "#define " guard))
      (newline 2)
      (goto-char (point-max))
      (newline)
      (insert (concat "#endif // " guard ))
      (newline))))
#+end_src

** Yaml
#+begin_src emacs-lisp
(my-use-package yaml-mode
  :config
  (add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode)))

(my-use-package flymake-yamllint
  :config
  (add-hook 'yaml-mode-hook 'flymake-yamllint-setup)
  (add-hook 'yaml-mode-hook 'flymake-mode))
#+end_src
** plantuml
#+BEGIN_SRC emacs-lisp
(my-use-package plantuml-mode
  :config
  (autoload 'plantuml-mode "plantuml-mode" "A mode for editing plantuml code." t)
  (add-to-list 'auto-mode-alist '("\\.uml\\'" . plantuml-mode))
  (add-to-list 'auto-mode-alist '("\\.puml\\'" . plantuml-mode))
  (setq plantuml-jar-path "~/plantuml.jar")
  (setq plantuml-output-type "png")
  (setq plantuml-default-exec-mode 'jar)
  (add-hook 'plantuml-mode-hook
          (lambda ()
            (local-set-key "\C-c\C-c" 'plantuml-preview))))
#+END_SRC

** Markdown
[[https://jblevins.org/projects/markdown-mode/][https://jblevins.org/projects/markdown-mode/]]

#+BEGIN_SRC emacs-lisp
(my-use-package markdown-mode
  :mode ("README\\.md\\'" . gfm-mode)
  :init (setq markdown-command "multimarkdown"))
#+END_SRC

;This library implements a Markdown back-end (github flavor) for Org exporter, based on the `md'
;back-end.
#+BEGIN_SRC emacs-lisp
(my-use-package ox-gfm)
#+END_SRC

** Docker
#+BEGIN_SRC emacs-lisp
(my-use-package dockerfile-mode)
#+END_SRC


** CMake

#+BEGIN_SRC emacs-lisp
(my-use-package cmake-mode
  :config
  (setq auto-mode-alist
        (append '(("CMakeLists\\.txt\\'" . cmake-mode)
                  ("\\.cmake\\'" . cmake-mode))
                auto-mode-alist)))
#+END_SRC

** Formatting
#+begin_src emacs-lisp
(my-use-package-startup format-all
  :config
  (setq-default format-all-formatters
                '(("C++"     (clang-format))))
  (global-set-key (kbd "<f7>") 'format-all-buffer))
#+end_src

* Completion

** company
#+begin_src emacs-lisp
(my-use-package-startup company
  :config
  (setq company-idle-delay 0.3)
  (global-company-mode 1)
  (global-set-key (kbd "C-<tab>") 'company-complete))
#+end_src




** IVY, Counsel, and Swiper Configuration
 Ensure Ivy and Counsel are installed

*** Counsel Configuration
Counsel configuration for extended commands

#+begin_src emacs-lisp
(my-use-package-startup counsel
  :bind (("C-x r" . counsel-recentf)
         ("C-x C-f" . counsel-find-file)))
#+end_src

*** smex

  Need to sort the counsel/ivy lists

#+begin_src lisp
;;(my-use-package-startup smex)
#+end_src


*** IVY 
#+begin_src emacs-lisp
(my-use-package-startup ivy
  :diminish (ivy-mode)
  :config
  (ivy-mode 1)
  (setq ivy-use-virtual-buffers t)
  (setq ivy-count-format "(%d/%d) ")
  (setq enable-recursive-minibuffers t)
  :bind (
         ("M-x" . counsel-M-x)
         ("C-x b" . ivy-switch-buffer)
         ("M-y" . counsel-yank-pop)
         ("C-c r" . counsel-recentf)))
#+end_src


*** Prevent Ivy from Auto-Connecting to TRAMP Paths

#+begin_src emacs-lisp
(defun my-prevent-tramp-auto-connection (orig-fun &rest args)
  "Advice to prevent automatic TRAMP connection unless explicitly selected."
  (let ((default-directory "/"))
    (apply orig-fun args)))

;; Apply the advice to `ivy-switch-buffer` and `counsel-recentf`
(advice-add 'ivy-switch-buffer :around #'my-prevent-tramp-auto-connection)
(advice-add 'counsel-recentf :around #'my-prevent-tramp-auto-connection)

;; Optionally, use this advice on other functions if needed
#+end_src

- The `my-prevent-tramp-auto-connection` function temporarily sets the `default-directory` to `/`, which prevents TRAMP from trying to connect when listing buffers or files.
- This advice wraps around `ivy-switch-buffer` and `counsel-recentf`, ensuring TRAMP connections are not initiated until you explicitly select a remote buffer or file.
- Once a TRAMP path is selected and confirmed, the connection will be made as expected.

This approach allows you to see and choose remote files without triggering connections during the buffer or recent file switch operation.

*** History based completions

#+begin_src emacs-lisp
(my-use-package-startup ivy-prescient
			:after counsel
			:config
			(ivy-prescient-mode 1)
			(prescient-persist-mode 1)
			(setq prescient-filter-method '(literal regexp fuzzy)))
#+end_src


*** Better jumps

#+begin_src emacs-lisp
(defun my/counsel-ag-enhanced ()
  "Run `counsel-ag` with Ivy-powered directory selection and word under point as default input."
  (interactive)
  (let* ((default-directory (read-directory-name "Start from directory: "))
         (default-term (thing-at-point 'symbol t))) 
    (counsel-ag default-term default-directory "--word-regex")))
(global-set-key (kbd "C-c j") #'my/counsel-ag-enhanced)
#+end_src


** Swiper for Search

Swiper for search

#+begin_src emacs-lisp
(my-use-package swiper
  :bind (("C-s" . swiper)
         ("C-c C-r" . ivy-resume)))
  (global-set-key (kbd "M-i") 'swiper-isearch-thing-at-point)
#+end_src


** Ivy-Xref for Tag Navigation

Ivy-Xref for better tag navigation
#+begin_src emacs-lisp
(my-use-package ivy-xref
  :config
  (setq xref-show-definitions-function #'ivy-xref-show-defs)
  (setq xref-show-xrefs-function #'ivy-xref-show-xrefs))
#+end_src

** Xref Configuration for Code Navigation

Configure for code navigation (xref)

# #+begin_src emacs-lisp
# (my-use-package xref
#   :bind (("M-." . xref-find-definitions)
#          ("M-," . xref-pop-marker-stack)
#          ("M-?" . xref-find-references)))
# #+end_src

** Avy for Quick Navigation

#+begin_src emacs-lisp
;; Replace helm-swoop with avy for quick navigation
(my-use-package avy
  :bind (("M-I" . avy-goto-char)
         ("C-c M-i" . avy-goto-word-1)
         ("C-x M-i" . avy-goto-line)))
#+end_src

** Additional Ivy Customization

Optional: Ivy settings for faster navigation

#+begin_src emacs-lisp
(setq ivy-re-builders-alist
      '((swiper . ivy--regex-plus)
        (t . ivy--regex-fuzzy)))

;; Additional Ivy options
(setq ivy-initial-inputs-alist nil)
(setq ivy-wrap t)
#+end_src





* Helper functions

** Convert current buffer to unix EOLs
#+begin_src emacs-lisp
(defun to-unix-eol ()
  "Change current buffer's line ending to unix convention."
  (interactive)
  (progn
    (set-buffer-file-coding-system 'unix) ; or 'mac or 'dos
    (save-buffer)))
#+end_src

** windows endlines
#+begin_src emacs-lisp
(defun remove-dos-eol ()
  "Do not show ^M in files containing mixed UNIX and DOS line endings."
  (interactive)
  (setq buffer-display-table (make-display-table))
  (aset buffer-display-table ?\^M []))
(add-hook 'prog-mode-hook 'remove-dos-eol)
#+end_src


* Machine Learning

#+begin_src lisp
(my-use-package chatgpt-shell)
#+end_src
