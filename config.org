#+TITLE: Literate emacs
#+AUTHOR: pedersen
#+OPTIONS: toc:nil num:nil

* Core Settings



** Paths

#+begin_src emacs-lisp
(setq native-comp-eln-load-path (list (concat user-emacs-directory "eln-cache/")))
(add-to-list 'load-path (concat user-emacs-directory "/lisp"))
(setq temporary-file-directory (concat user-emacs-directory "/tmp/"))
(defvar backup-dir (concat user-emacs-directory "/backups"))
(unless (file-exists-p backup-dir)
  (make-directory backup-dir))

#+end_src


** Speed up loading

#+begin_src emacs-lisp
(setq gc-cons-threshold 100000000)
(add-hook 'after-init-hook (lambda () (setq gc-cons-threshold 800000)))
#+end_src



** Local setup
This is a file with setup for email account / various tokens etc that
is required, but i do not want to publish or is specific to the
machine that i am using.

#+begin_src emacs-lisp :tangle no
(setq user-mail-address "user@example.com")
(setq org-directory "/home/user/orgs")
#+end_src


#+begin_src emacs-lisp
(load-library (concat user-emacs-directory "local-setup.el"))  
#+end_src


** UTF-8 Encoding
#+BEGIN_SRC emacs-lisp
(setq locale-coding-system 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-selection-coding-system 'utf-8)
(prefer-coding-system 'utf-8)
#+END_SRC

** Lean ui
#+begin_src emacs-lisp
;; don't show menu-bar
(menu-bar-mode -1)
;; same for the toolbar
(tool-bar-mode -1)
;; .. and for the scrollbar
(scroll-bar-mode -1)
;;dont show the GNU splash screen
(setq inhibit-startup-message t)
;; show selection from mark
(transient-mark-mode t)
;; syntax highlight
(global-font-lock-mode t)
;; Show current buffer size
(size-indication-mode t)
#+end_src

** Font choice
#+begin_src emacs-lisp 
(set-face-attribute 'default nil :font "DejaVu Sans Mono" :height (pcase system-type
                                                                    ('gnu/linux 110)
                                                                    ('darwin 130)) :weight 'normal)
#+end_src

*** Make font bigger/smaller.
#+begin_src emacs-lisp
(global-set-key (kbd "C-+") 'text-scale-increase)
(global-set-key (kbd "C--") 'text-scale-decrease)
(global-set-key (kbd "C-0") 'text-scale-adjust)
#+end_src


** Nice behavioral tweaks
#+begin_src emacs-lisp
;; turn off bip warnings
(setq visible-bell 1)
;; use y-or-n predicates
(setq use-short-answers t)
;; Fatfinger protection
(setq confirm-kill-emacs 'y-or-n-p)
#+end_src


* Packages setup

#+begin_src emacs-lisp
(require 'package)
(setq package-archives
      '(("gnu" . "http://elpa.gnu.org/packages/")
        ("melpa" . "http://melpa.org/packages/")))


(defun require-package (package)
  "Ensure PACKAGE is installed. If not, refresh package contents and install it."
  (unless (package-installed-p package)
    (unless package-archive-contents
      (package-refresh-contents))
    (if (package-installed-p package)
        t
      (progn
        (package-install package)
        (require package)))))

(require-package 'use-package)
(require 'use-package)
(setq use-package-always-ensure t)

(defmacro my-use-package (package &rest args)
  "Ensure PACKAGE is installed using `require-package` and configure it with `use-package`.
Defaults to `:defer t` unless overridden in ARGS."
  `(progn
     (require-package ',package)
     (use-package ,package
       :defer t
       ,@args)))

#+end_src


* File associations

** Open .h/.cc files in c++ mode.

#+begin_src emacs-lisp
(add-to-list 'auto-mode-alist '("\\.h\\'" . c++-mode))
(add-to-list 'auto-mode-alist '("\\.cc\\'" . c++-mode))
#+end_src


* Viewing files

** Browse archives
#+begin_src emacs-lisp
(auto-compression-mode t)
#+end_src

** Auto reverting
#+begin_src emacs-lisp
;; Auto-revert buffers when files change on disk.
(defvar auto-revert-verbose t)
;; announce when buffer is reverted.
(global-auto-revert-mode t)
#+end_src

** Backup pruning
Save all backups and auto-saves to a temporary directory. And clean it for all files older than a week.



#+begin_src emacs-lisp
(message "Deleting backup files older than a week...")
(let ((week (* 60 60 24 7))
      (current (float-time (current-time))))
  (dolist (file (directory-files backup-dir t))
    (when (and (backup-file-name-p file)
               (> (- current (float-time (nth 5 (file-attributes file))))
                  week))
      (message "%s" file)
      (delete-file file))))

(setq backup-directory-alist `((".*" . ,backup-dir)))
(setq auto-save-file-name-transforms `((".*" ,backup-dir t)))
#+end_src

*** TODO Make this run after loading emacs...

* Navigating

** Between open buffers

#+begin_src emacs-lisp
(my-use-package window-numbering
  :config
  (window-numbering-mode 't))
#+end_src


** Files

*** Show recently opened files

#+begin_src emacs-lisp
(my-use-package recentf
  :config
  (setq recentf-max-saved-items 200
        ;; Cleanup recent files only when Emacs is idle, but not when the mode
        ;; is enabled, because that unnecessarily slows down Emacs. My Emacs
        ;; idles often enough to have the recent files list clean up regularly
        recentf-auto-cleanup 300
        recentf-exclude (list "/\\.git/.*\\'" ; Git contents
                              "/elpa/.*\\'"   ; Package files
                              "/itsalltext/"  ; It's all text temp files
                              ".*\\.gz\\'"
                              "TAGS"
                              (concat user-emacs-directory "/saveplace.txt")
                              ".*-autoloads\\.el\\'"))
  (recentf-mode))
#+end_src


*** Magic return to where you left from
I am not sure that this really works..
#+begin_src emacs-lisp
(save-place-mode 1)
#+end_src

*** Saves mini buffer history including search and kill ring values, and compile history.

#+begin_src emacs-lisp
(my-use-package savehist
  :config
  (setq savehist-additional-variables
        '(search-ring regexp-search-ring kill-ring compile-history))
  (setq savehist-autosave-interval 60)
  (setq savehist-file (concat user-emacs-directory "savehist"))
  (savehist-mode t))
#+end_src




* Writing

Remember you may have to install aspell 

#+begin_src emacs-lisp
;; Set aspell as spell program
(defvar ispell-program-name "aspell")

;; Speed up aspell: ultra | fast | normal
(defvar ispell-extra-args '("--sug-mode=normal"))

;; Flyspell activation for text mode
(add-hook 'text-mode-hook
          (lambda () (flyspell-mode t)))

;; Change to danish dict
(defun da-spell ()
  "Set Ippell to use Danish dictionary."
  (interactive)
  (ispell-change-dictionary "dansk"))

;; Change to english dict
(defun en-spell ()
  "Set Ispell to use English dictionary."
  (interactive)
  (ispell-change-dictionary "english"))
#+end_src



* Programming

** Compile / Error key bindings
#+begin_src emacs-lisp

(global-set-key [(C-f5)] 'compile)
(global-set-key [(f5)] 'recompile)
(global-set-key [(f6)] 'next-error)
(global-set-key [(C-f6)] 'flycheck-next-error)

(add-hook 'prog-mode-hook
          (lambda ()
            (local-set-key "\C-c\C-c" 'recompile)
            (local-set-key "\C-c\C-f" 'next-error)))
#+end_src


** Viewing compilation output

This can cost in performance, as something may be examining the
compilation buffer. But it should be ok, for now..

#+begin_src emacs-lisp
(setq compilation-scroll-output t)
(setq compilation-window-height 30
      compilation-scroll-output 'first-error
      compilation-skip-threshold 2 ; skip accros warnings
      compilation-always-kill t) ;; Don't ask, just start new compilation.

(my-use-package ansi-color
  :hook (compilation-filter . ansi-color-compilation-filter)) 
#+end_src


** eglot

#+begin_src emacs-lisp
(with-eval-after-load 'eglot
  (add-to-list 'eglot-server-programs 
	       '((c-mode c++-mode) . ("clangd" "-j=8"
				      "--log=error"
				      "--malloc-trim"
				      "--background-index"
				      "--clang-tidy"
				      "--cross-file-rename"
				      "--completion-style=detailed"
				      "--pch-storage=memory"
				      "--header-insertion=never"
				      "--header-insertion-decorators=0"))))

(add-hook 'c-mode-hook #'eglot-ensure)
(add-hook 'c++-mode-hook #'eglot-ensure)
(add-hook 'rust-mode-hook #'eglot-ensure)

(my-use-package eldoc-box
  :ensure t
  :config
  (add-hook 'eglot-managed-mode-hook #'eldoc-box-hover-mode t))

#+end_src



** elisp

#+begin_src emacs-lisp
(add-hook 'emacs-lisp-mode-hook
          (lambda ()
            (eldoc-mode)
            (local-set-key (kbd "C-c b") 'eval-buffer)
            (local-set-key (kbd "C-c r") 'eval-region)))
#+end_src


** C++ 

*** Create include guards

#+begin_src emacs-lisp
(defun my-c-header-ifdef ()
  "Create a header guard with random suffix on the define name."
  (interactive)
  (save-excursion
    (let* ((guard (replace-regexp-in-string "[^0-9a-zA-Z]" "_"
                                            (buffer-name)))
           (guard (replace-regexp-in-string "h\\'" "" guard))
           (guard (concat guard  (shell-command-to-string "openssl rand -hex 8"))))
      (goto-char (point-min))
      (insert (concat "#ifndef " guard))
      (insert (concat "#define " guard))
      (newline 2)
      (goto-char (point-max))
      (newline)
      (insert (concat "#endif // " guard ))
      (newline))))
#+end_src
***  clang-format
#+begin_src emacs-lisp
(defun clang-format-dwim ()
  "Perform clang-format on region or buffer."
  (interactive)
  (save-excursion
    (if (region-active-p)
        (clang-format-region (region-beginning) (region-end))
      (clang-format-buffer))))


;; load the clang-format module
(my-use-package clang-format
  :ensure t
  :config
  (add-hook 'c++-mode-hook (lambda ()
                           (define-key c++-mode-map (kbd "f7") 'clang-format-dwim))))
#+end_src
** Yaml
#+begin_src emacs-lisp
(use-package yaml-mode
  :config
  (add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode)))

(use-package flymake-yamllint
  :ensure t
  :config
  (add-hook 'yaml-mode-hook 'flymake-yamllint-setup)
  (add-hook 'yaml-mode-hook 'flymake-mode))
#+end_src



(my-use-package git-timemachine)

** Markdown
[[https://jblevins.org/projects/markdown-mode/][https://jblevins.org/projects/markdown-mode/]]

#+BEGIN_SRC emacs-lisp
(my-use-package markdown-mode
  :mode ("README\\.md\\'" . gfm-mode)
  :init (setq markdown-command "multimarkdown"))
#+END_SRC

** Docker
#+BEGIN_SRC emacs-lisp
(my-use-package dockerfile-mode)
#+END_SRC



* Helper functions

** Convert current buffer to unix EOLs
#+begin_src emacs-lisp
(defun to-unix-eol ()
  "Change current buffer's line ending to unix convention."
  (interactive)
  (progn
    (set-buffer-file-coding-system 'unix) ; or 'mac or 'dos
    (save-buffer)))
#+end_src

** windows endlines
#+begin_src emacs-lisp
(defun remove-dos-eol ()
  "Do not show ^M in files containing mixed UNIX and DOS line endings."
  (interactive)
  (setq buffer-display-table (make-display-table))
  (aset buffer-display-table ?\^M []))
(add-hook 'prog-mode-hook 'remove-dos-eol)
#+end_src

